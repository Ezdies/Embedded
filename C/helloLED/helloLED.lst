                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.0.0 #11528 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module helloLED
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _WZOR
                                     12 	.globl _t0_int
                                     13 	.globl _main
                                     14 	.globl _CY
                                     15 	.globl _AC
                                     16 	.globl _F0
                                     17 	.globl _RS1
                                     18 	.globl _RS0
                                     19 	.globl _OV
                                     20 	.globl _F1
                                     21 	.globl _P
                                     22 	.globl _PS
                                     23 	.globl _PT1
                                     24 	.globl _PX1
                                     25 	.globl _PT0
                                     26 	.globl _PX0
                                     27 	.globl _RD
                                     28 	.globl _WR
                                     29 	.globl _T1
                                     30 	.globl _T0
                                     31 	.globl _INT1
                                     32 	.globl _INT0
                                     33 	.globl _TXD
                                     34 	.globl _RXD
                                     35 	.globl _P3_7
                                     36 	.globl _P3_6
                                     37 	.globl _P3_5
                                     38 	.globl _P3_4
                                     39 	.globl _P3_3
                                     40 	.globl _P3_2
                                     41 	.globl _P3_1
                                     42 	.globl _P3_0
                                     43 	.globl _EA
                                     44 	.globl _ES
                                     45 	.globl _ET1
                                     46 	.globl _EX1
                                     47 	.globl _ET0
                                     48 	.globl _EX0
                                     49 	.globl _P2_7
                                     50 	.globl _P2_6
                                     51 	.globl _P2_5
                                     52 	.globl _P2_4
                                     53 	.globl _P2_3
                                     54 	.globl _P2_2
                                     55 	.globl _P2_1
                                     56 	.globl _P2_0
                                     57 	.globl _SM0
                                     58 	.globl _SM1
                                     59 	.globl _SM2
                                     60 	.globl _REN
                                     61 	.globl _TB8
                                     62 	.globl _RB8
                                     63 	.globl _TI
                                     64 	.globl _RI
                                     65 	.globl _P1_7
                                     66 	.globl _P1_6
                                     67 	.globl _P1_5
                                     68 	.globl _P1_4
                                     69 	.globl _P1_3
                                     70 	.globl _P1_2
                                     71 	.globl _P1_1
                                     72 	.globl _P1_0
                                     73 	.globl _TF1
                                     74 	.globl _TR1
                                     75 	.globl _TF0
                                     76 	.globl _TR0
                                     77 	.globl _IE1
                                     78 	.globl _IT1
                                     79 	.globl _IE0
                                     80 	.globl _IT0
                                     81 	.globl _P0_7
                                     82 	.globl _P0_6
                                     83 	.globl _P0_5
                                     84 	.globl _P0_4
                                     85 	.globl _P0_3
                                     86 	.globl _P0_2
                                     87 	.globl _P0_1
                                     88 	.globl _P0_0
                                     89 	.globl _B
                                     90 	.globl _ACC
                                     91 	.globl _PSW
                                     92 	.globl _IP
                                     93 	.globl _P3
                                     94 	.globl _IE
                                     95 	.globl _P2
                                     96 	.globl _SBUF
                                     97 	.globl _SCON
                                     98 	.globl _P1
                                     99 	.globl _TH1
                                    100 	.globl _TH0
                                    101 	.globl _TL1
                                    102 	.globl _TL0
                                    103 	.globl _TMOD
                                    104 	.globl _TCON
                                    105 	.globl _PCON
                                    106 	.globl _DPH
                                    107 	.globl _DPL
                                    108 	.globl _SP
                                    109 	.globl _P0
                                    110 	.globl _SEG_OFF
                                    111 	.globl _t0_flag
                                    112 	.globl _send_flag
                                    113 	.globl _rec_flag
                                    114 	.globl _LED
                                    115 	.globl _send_buf
                                    116 	.globl _timer_buf
                                    117 	.globl _t0_serv
                                    118 	.globl _rec_serv
                                    119 	.globl _send_serv
                                    120 ;--------------------------------------------------------
                                    121 ; special function registers
                                    122 ;--------------------------------------------------------
                                    123 	.area RSEG    (ABS,DATA)
      000000                        124 	.org 0x0000
                           000080   125 _P0	=	0x0080
                           000081   126 _SP	=	0x0081
                           000082   127 _DPL	=	0x0082
                           000083   128 _DPH	=	0x0083
                           000087   129 _PCON	=	0x0087
                           000088   130 _TCON	=	0x0088
                           000089   131 _TMOD	=	0x0089
                           00008A   132 _TL0	=	0x008a
                           00008B   133 _TL1	=	0x008b
                           00008C   134 _TH0	=	0x008c
                           00008D   135 _TH1	=	0x008d
                           000090   136 _P1	=	0x0090
                           000098   137 _SCON	=	0x0098
                           000099   138 _SBUF	=	0x0099
                           0000A0   139 _P2	=	0x00a0
                           0000A8   140 _IE	=	0x00a8
                           0000B0   141 _P3	=	0x00b0
                           0000B8   142 _IP	=	0x00b8
                           0000D0   143 _PSW	=	0x00d0
                           0000E0   144 _ACC	=	0x00e0
                           0000F0   145 _B	=	0x00f0
                                    146 ;--------------------------------------------------------
                                    147 ; special function bits
                                    148 ;--------------------------------------------------------
                                    149 	.area RSEG    (ABS,DATA)
      000000                        150 	.org 0x0000
                           000080   151 _P0_0	=	0x0080
                           000081   152 _P0_1	=	0x0081
                           000082   153 _P0_2	=	0x0082
                           000083   154 _P0_3	=	0x0083
                           000084   155 _P0_4	=	0x0084
                           000085   156 _P0_5	=	0x0085
                           000086   157 _P0_6	=	0x0086
                           000087   158 _P0_7	=	0x0087
                           000088   159 _IT0	=	0x0088
                           000089   160 _IE0	=	0x0089
                           00008A   161 _IT1	=	0x008a
                           00008B   162 _IE1	=	0x008b
                           00008C   163 _TR0	=	0x008c
                           00008D   164 _TF0	=	0x008d
                           00008E   165 _TR1	=	0x008e
                           00008F   166 _TF1	=	0x008f
                           000090   167 _P1_0	=	0x0090
                           000091   168 _P1_1	=	0x0091
                           000092   169 _P1_2	=	0x0092
                           000093   170 _P1_3	=	0x0093
                           000094   171 _P1_4	=	0x0094
                           000095   172 _P1_5	=	0x0095
                           000096   173 _P1_6	=	0x0096
                           000097   174 _P1_7	=	0x0097
                           000098   175 _RI	=	0x0098
                           000099   176 _TI	=	0x0099
                           00009A   177 _RB8	=	0x009a
                           00009B   178 _TB8	=	0x009b
                           00009C   179 _REN	=	0x009c
                           00009D   180 _SM2	=	0x009d
                           00009E   181 _SM1	=	0x009e
                           00009F   182 _SM0	=	0x009f
                           0000A0   183 _P2_0	=	0x00a0
                           0000A1   184 _P2_1	=	0x00a1
                           0000A2   185 _P2_2	=	0x00a2
                           0000A3   186 _P2_3	=	0x00a3
                           0000A4   187 _P2_4	=	0x00a4
                           0000A5   188 _P2_5	=	0x00a5
                           0000A6   189 _P2_6	=	0x00a6
                           0000A7   190 _P2_7	=	0x00a7
                           0000A8   191 _EX0	=	0x00a8
                           0000A9   192 _ET0	=	0x00a9
                           0000AA   193 _EX1	=	0x00aa
                           0000AB   194 _ET1	=	0x00ab
                           0000AC   195 _ES	=	0x00ac
                           0000AF   196 _EA	=	0x00af
                           0000B0   197 _P3_0	=	0x00b0
                           0000B1   198 _P3_1	=	0x00b1
                           0000B2   199 _P3_2	=	0x00b2
                           0000B3   200 _P3_3	=	0x00b3
                           0000B4   201 _P3_4	=	0x00b4
                           0000B5   202 _P3_5	=	0x00b5
                           0000B6   203 _P3_6	=	0x00b6
                           0000B7   204 _P3_7	=	0x00b7
                           0000B0   205 _RXD	=	0x00b0
                           0000B1   206 _TXD	=	0x00b1
                           0000B2   207 _INT0	=	0x00b2
                           0000B3   208 _INT1	=	0x00b3
                           0000B4   209 _T0	=	0x00b4
                           0000B5   210 _T1	=	0x00b5
                           0000B6   211 _WR	=	0x00b6
                           0000B7   212 _RD	=	0x00b7
                           0000B8   213 _PX0	=	0x00b8
                           0000B9   214 _PT0	=	0x00b9
                           0000BA   215 _PX1	=	0x00ba
                           0000BB   216 _PT1	=	0x00bb
                           0000BC   217 _PS	=	0x00bc
                           0000D0   218 _P	=	0x00d0
                           0000D1   219 _F1	=	0x00d1
                           0000D2   220 _OV	=	0x00d2
                           0000D3   221 _RS0	=	0x00d3
                           0000D4   222 _RS1	=	0x00d4
                           0000D5   223 _F0	=	0x00d5
                           0000D6   224 _AC	=	0x00d6
                           0000D7   225 _CY	=	0x00d7
                                    226 ;--------------------------------------------------------
                                    227 ; overlayable register banks
                                    228 ;--------------------------------------------------------
                                    229 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        230 	.ds 8
                                    231 ;--------------------------------------------------------
                                    232 ; internal ram data
                                    233 ;--------------------------------------------------------
                                    234 	.area DSEG    (DATA)
      000000                        235 _timer_buf::
      000000                        236 	.ds 1
      000001                        237 _send_buf::
      000001                        238 	.ds 1
                                    239 ;--------------------------------------------------------
                                    240 ; overlayable items in internal ram 
                                    241 ;--------------------------------------------------------
                                    242 	.area	OSEG    (OVR,DATA)
                                    243 ;--------------------------------------------------------
                                    244 ; Stack segment in internal ram 
                                    245 ;--------------------------------------------------------
                                    246 	.area	SSEG
      000000                        247 __start__stack:
      000000                        248 	.ds	1
                                    249 
                                    250 ;--------------------------------------------------------
                                    251 ; indirectly addressable internal ram data
                                    252 ;--------------------------------------------------------
                                    253 	.area ISEG    (DATA)
                                    254 ;--------------------------------------------------------
                                    255 ; absolute internal ram data
                                    256 ;--------------------------------------------------------
                                    257 	.area IABS    (ABS,DATA)
                                    258 	.area IABS    (ABS,DATA)
                                    259 ;--------------------------------------------------------
                                    260 ; bit data
                                    261 ;--------------------------------------------------------
                                    262 	.area BSEG    (BIT)
                           000097   263 _LED	=	0x0097
      000000                        264 _rec_flag::
      000000                        265 	.ds 1
      000001                        266 _send_flag::
      000001                        267 	.ds 1
      000002                        268 _t0_flag::
      000002                        269 	.ds 1
                           000096   270 _SEG_OFF	=	0x0096
                                    271 ;--------------------------------------------------------
                                    272 ; paged external ram data
                                    273 ;--------------------------------------------------------
                                    274 	.area PSEG    (PAG,XDATA)
                                    275 ;--------------------------------------------------------
                                    276 ; external ram data
                                    277 ;--------------------------------------------------------
                                    278 	.area XSEG    (XDATA)
                                    279 ;--------------------------------------------------------
                                    280 ; absolute external ram data
                                    281 ;--------------------------------------------------------
                                    282 	.area XABS    (ABS,XDATA)
                                    283 ;--------------------------------------------------------
                                    284 ; external initialized ram data
                                    285 ;--------------------------------------------------------
                                    286 	.area XISEG   (XDATA)
                                    287 	.area HOME    (CODE)
                                    288 	.area GSINIT0 (CODE)
                                    289 	.area GSINIT1 (CODE)
                                    290 	.area GSINIT2 (CODE)
                                    291 	.area GSINIT3 (CODE)
                                    292 	.area GSINIT4 (CODE)
                                    293 	.area GSINIT5 (CODE)
                                    294 	.area GSINIT  (CODE)
                                    295 	.area GSFINAL (CODE)
                                    296 	.area CSEG    (CODE)
                                    297 ;--------------------------------------------------------
                                    298 ; interrupt vector 
                                    299 ;--------------------------------------------------------
                                    300 	.area HOME    (CODE)
      000000                        301 __interrupt_vect:
      000000 02r00r00         [24]  302 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  303 	reti
      000004                        304 	.ds	7
      00000B 02r00r9F         [24]  305 	ljmp	_t0_int
                                    306 ;--------------------------------------------------------
                                    307 ; global & static initialisations
                                    308 ;--------------------------------------------------------
                                    309 	.area HOME    (CODE)
                                    310 	.area GSINIT  (CODE)
                                    311 	.area GSFINAL (CODE)
                                    312 	.area GSINIT  (CODE)
                                    313 	.globl __sdcc_gsinit_startup
                                    314 	.globl __sdcc_program_startup
                                    315 	.globl __start__stack
                                    316 	.globl __mcs51_genXINIT
                                    317 	.globl __mcs51_genXRAMCLEAR
                                    318 	.globl __mcs51_genRAMCLEAR
                                    319 	.area GSFINAL (CODE)
      000000 02r00r0E         [24]  320 	ljmp	__sdcc_program_startup
                                    321 ;--------------------------------------------------------
                                    322 ; Home
                                    323 ;--------------------------------------------------------
                                    324 	.area HOME    (CODE)
                                    325 	.area HOME    (CODE)
      00000E                        326 __sdcc_program_startup:
      00000E 02r00r00         [24]  327 	ljmp	_main
                                    328 ;	return from main will return to caller
                                    329 ;--------------------------------------------------------
                                    330 ; code
                                    331 ;--------------------------------------------------------
                                    332 	.area CSEG    (CODE)
                                    333 ;------------------------------------------------------------
                                    334 ;Allocation info for local variables in function 'main'
                                    335 ;------------------------------------------------------------
                                    336 ;led_wyb                   Allocated to registers 
                                    337 ;led_led                   Allocated to registers 
                                    338 ;led_p                     Allocated to registers r6 
                                    339 ;led_b                     Allocated to registers r7 
                                    340 ;------------------------------------------------------------
                                    341 ;	helloLED.c:45: void main()
                                    342 ;	-----------------------------------------
                                    343 ;	 function main
                                    344 ;	-----------------------------------------
      000000                        345 _main:
                           000007   346 	ar7 = 0x07
                           000006   347 	ar6 = 0x06
                           000005   348 	ar5 = 0x05
                           000004   349 	ar4 = 0x04
                           000003   350 	ar3 = 0x03
                           000002   351 	ar2 = 0x02
                           000001   352 	ar1 = 0x01
                           000000   353 	ar0 = 0x00
                                    354 ;	helloLED.c:58: PCON = 0x80; // zegar dla sio, T1 (19200 b/s)
      000000 75 87 80         [24]  355 	mov	_PCON,#0x80
                                    356 ;	helloLED.c:59: SCON = 0b01010000;   //ustaw parametry transmisji
      000003 75 98 50         [24]  357 	mov	_SCON,#0x50
                                    358 ;	helloLED.c:61: TMOD = 0b00100001;   //ustaw T1 w tryb 2; T0 w tryb 1
      000006 75 89 21         [24]  359 	mov	_TMOD,#0x21
                                    360 ;	helloLED.c:63: TL0 = TL_0; //ustawienie m�odszego i starszego
      000009 75 8A 66         [24]  361 	mov	_TL0,#0x66
                                    362 ;	helloLED.c:64: TH0 = TH_0; //bajtu T0 przerwanie co 1 milisekund �
      00000C 75 8C FC         [24]  363 	mov	_TH0,#0xfc
                                    364 ;	helloLED.c:66: TL1 = 0xFD; //ustawienie m�odszego
      00000F 75 8B FD         [24]  365 	mov	_TL1,#0xfd
                                    366 ;	helloLED.c:67: TH1 = 0xFD; //i starszego bajtu T1 (19200)
      000012 75 8D FD         [24]  367 	mov	_TH1,#0xfd
                                    368 ;	helloLED.c:71: timer_buf  = T100;   // �aduj timeout T0 (100ms)
      000015 75*00 64         [24]  369 	mov	_timer_buf,#0x64
                                    370 ;	helloLED.c:72: send_flag  = FALSE;  // kasuj flag �  gotowo � ci danych
                                    371 ;	assignBit
      000018 C2*01            [12]  372 	clr	_send_flag
                                    373 ;	helloLED.c:73: rec_flag   = FALSE;  // kasuj flag �  odbiornik gotowy
                                    374 ;	assignBit
      00001A C2*00            [12]  375 	clr	_rec_flag
                                    376 ;	helloLED.c:74: t0_flag    = FALSE;  // zeruj flag �  przerw. t0_int
                                    377 ;	assignBit
      00001C C2*02            [12]  378 	clr	_t0_flag
                                    379 ;	helloLED.c:76: ET0 = TRUE; // aktywuj przerwanie od licznika T0
                                    380 ;	assignBit
      00001E D2 A9            [12]  381 	setb	_ET0
                                    382 ;	helloLED.c:77: ES  = TRUE; // aktywuj przerwanie od UART
                                    383 ;	assignBit
      000020 D2 AC            [12]  384 	setb	_ES
                                    385 ;	helloLED.c:78: EA  = TRUE; // aktywuj wszystkie przerwania
                                    386 ;	assignBit
      000022 D2 AF            [12]  387 	setb	_EA
                                    388 ;	helloLED.c:79: TR0 = TRUE; // uruchom licznik T0
                                    389 ;	assignBit
      000024 D2 8C            [12]  390 	setb	_TR0
                                    391 ;	helloLED.c:80: TR1 = TRUE; // uruchom licznik T1 
                                    392 ;	assignBit
      000026 D2 8E            [12]  393 	setb	_TR1
                                    394 ;	helloLED.c:87: while (TRUE) {
      000028                        395 00109$:
                                    396 ;	helloLED.c:89: if (rec_flag) {      //odebrany bajt w buf. UART
                                    397 ;	helloLED.c:90: rec_flag = FALSE;//kasuj flag �  bajt odebrany
                                    398 ;	assignBit
      000028 10*00 02         [24]  399 	jbc	_rec_flag,00140$
      00002B 80 03            [24]  400 	sjmp	00102$
      00002D                        401 00140$:
                                    402 ;	helloLED.c:91: rec_serv();      //obs�u S  odebrany bajt
      00002D 12r00r7E         [24]  403 	lcall	_rec_serv
      000030                        404 00102$:
                                    405 ;	helloLED.c:94: if (send_flag){       //trzeba wys�a�  dane UART
      000030 30*01 03         [24]  406 	jnb	_send_flag,00104$
                                    407 ;	helloLED.c:95: send_serv();     //wykonaj obs�ug�  nadawania
      000033 12r00r95         [24]  408 	lcall	_send_serv
      000036                        409 00104$:
                                    410 ;	helloLED.c:98: if (t0_flag) {       //przerwanie zegarowe
                                    411 ;	helloLED.c:99: t0_flag = FALSE; //zeruj flag�
                                    412 ;	assignBit
      000036 10*02 02         [24]  413 	jbc	_t0_flag,00142$
      000039 80 03            [24]  414 	sjmp	00106$
      00003B                        415 00142$:
                                    416 ;	helloLED.c:100: t0_serv();       //obs�u� przerwanie od T0
      00003B 12r00r71         [24]  417 	lcall	_t0_serv
      00003E                        418 00106$:
                                    419 ;	helloLED.c:106: for (led_p = 0, led_b = 1; led_p < 6;  led_p++,  led_b += led_b){
      00003E 7F 01            [12]  420 	mov	r7,#0x01
      000040 7E 00            [12]  421 	mov	r6,#0x00
      000042                        422 00112$:
      000042 BE 06 00         [24]  423 	cjne	r6,#0x06,00143$
      000045                        424 00143$:
      000045 50 E1            [24]  425 	jnc	00109$
                                    426 ;	helloLED.c:107: SEG_OFF = TRUE;
                                    427 ;	assignBit
      000047 D2 96            [12]  428 	setb	_SEG_OFF
                                    429 ;	helloLED.c:108: *led_wyb = led_b;
      000049 90 FF 30         [24]  430 	mov	dptr,#0xff30
      00004C EF               [12]  431 	mov	a,r7
      00004D F0               [24]  432 	movx	@dptr,a
                                    433 ;	helloLED.c:109: *led_led = WZOR[led_p+4];
      00004E 8E 05            [24]  434 	mov	ar5,r6
      000050 ED               [12]  435 	mov	a,r5
      000051 24 04            [12]  436 	add	a,#0x04
      000053 FD               [12]  437 	mov	r5,a
      000054 33               [12]  438 	rlc	a
      000055 95 E0            [12]  439 	subb	a,acc
      000057 FC               [12]  440 	mov	r4,a
      000058 ED               [12]  441 	mov	a,r5
      000059 24r00            [12]  442 	add	a,#_WZOR
      00005B F5 82            [12]  443 	mov	dpl,a
      00005D EC               [12]  444 	mov	a,r4
      00005E 34s00            [12]  445 	addc	a,#(_WZOR >> 8)
      000060 F5 83            [12]  446 	mov	dph,a
      000062 E4               [12]  447 	clr	a
      000063 93               [24]  448 	movc	a,@a+dptr
      000064 FD               [12]  449 	mov	r5,a
      000065 90 FF 38         [24]  450 	mov	dptr,#0xff38
      000068 F0               [24]  451 	movx	@dptr,a
                                    452 ;	helloLED.c:110: SEG_OFF = FALSE;
                                    453 ;	assignBit
      000069 C2 96            [12]  454 	clr	_SEG_OFF
                                    455 ;	helloLED.c:106: for (led_p = 0, led_b = 1; led_p < 6;  led_p++,  led_b += led_b){
      00006B 0E               [12]  456 	inc	r6
      00006C EF               [12]  457 	mov	a,r7
      00006D 2F               [12]  458 	add	a,r7
      00006E FF               [12]  459 	mov	r7,a
                                    460 ;	helloLED.c:116: return;
                                    461 ;	helloLED.c:117: }
      00006F 80 D1            [24]  462 	sjmp	00112$
                                    463 ;------------------------------------------------------------
                                    464 ;Allocation info for local variables in function 't0_serv'
                                    465 ;------------------------------------------------------------
                                    466 ;	helloLED.c:123: void t0_serv(void)
                                    467 ;	-----------------------------------------
                                    468 ;	 function t0_serv
                                    469 ;	-----------------------------------------
      000071                        470 _t0_serv:
                                    471 ;	helloLED.c:125: if (timer_buf){
      000071 E5*00            [12]  472 	mov	a,_timer_buf
      000073 60 03            [24]  473 	jz	00102$
                                    474 ;	helloLED.c:126: timer_buf--;         //zmniejsz stan czasomierza
      000075 15*00            [12]  475 	dec	_timer_buf
      000077 22               [24]  476 	ret
      000078                        477 00102$:
                                    478 ;	helloLED.c:129: timer_buf = T100;    //regeneruj licznik (100ms)
      000078 75*00 64         [24]  479 	mov	_timer_buf,#0x64
                                    480 ;	helloLED.c:130: LED = !LED;          //zmie�  stan diody LED
      00007B B2 97            [12]  481 	cpl	_LED
                                    482 ;	helloLED.c:132: }
      00007D 22               [24]  483 	ret
                                    484 ;------------------------------------------------------------
                                    485 ;Allocation info for local variables in function 'rec_serv'
                                    486 ;------------------------------------------------------------
                                    487 ;uc                        Allocated to registers r7 
                                    488 ;------------------------------------------------------------
                                    489 ;	helloLED.c:134: void rec_serv(void)
                                    490 ;	-----------------------------------------
                                    491 ;	 function rec_serv
                                    492 ;	-----------------------------------------
      00007E                        493 _rec_serv:
                                    494 ;	helloLED.c:136: unsigned char uc = SBUF; //pobierz z bufara RS'a
      00007E AF 99            [24]  495 	mov	r7,_SBUF
                                    496 ;	helloLED.c:137: if (( uc >= 'a' ) && ( uc < 'z' + 1 ))
      000080 BF 61 00         [24]  497 	cjne	r7,#0x61,00114$
      000083                        498 00114$:
      000083 40 0B            [24]  499 	jc	00102$
      000085 BF 7B 00         [24]  500 	cjne	r7,#0x7b,00116$
      000088                        501 00116$:
      000088 50 06            [24]  502 	jnc	00102$
                                    503 ;	helloLED.c:138: uc += 'A' - 'a';   //zamie�  ma��  na wielk�
      00008A 8F 06            [24]  504 	mov	ar6,r7
      00008C 74 E0            [12]  505 	mov	a,#0xe0
      00008E 2E               [12]  506 	add	a,r6
      00008F FF               [12]  507 	mov	r7,a
      000090                        508 00102$:
                                    509 ;	helloLED.c:140: send_buf = uc;         //zapami�taj w buforze
      000090 8F*01            [24]  510 	mov	_send_buf,r7
                                    511 ;	helloLED.c:141: send_flag = TRUE;      //ustaw flag�  gotowo�ci danych
                                    512 ;	assignBit
      000092 D2*01            [12]  513 	setb	_send_flag
                                    514 ;	helloLED.c:142: }
      000094 22               [24]  515 	ret
                                    516 ;------------------------------------------------------------
                                    517 ;Allocation info for local variables in function 'send_serv'
                                    518 ;------------------------------------------------------------
                                    519 ;	helloLED.c:144: void send_serv(void)
                                    520 ;	-----------------------------------------
                                    521 ;	 function send_serv
                                    522 ;	-----------------------------------------
      000095                        523 _send_serv:
                                    524 ;	helloLED.c:146: if (TI) //nadajnik nie jest gotowy
      000095 30 99 01         [24]  525 	jnb	_TI,00102$
                                    526 ;	helloLED.c:147: return;
      000098 22               [24]  527 	ret
      000099                        528 00102$:
                                    529 ;	helloLED.c:149: send_flag = FALSE;     //zeruj flag� nadawania bajtu
                                    530 ;	assignBit
      000099 C2*01            [12]  531 	clr	_send_flag
                                    532 ;	helloLED.c:150: SBUF = send_buf;       //wy�lij bajt
      00009B 85*01 99         [24]  533 	mov	_SBUF,_send_buf
                                    534 ;	helloLED.c:151: }
      00009E 22               [24]  535 	ret
                                    536 ;------------------------------------------------------------
                                    537 ;Allocation info for local variables in function 't0_int'
                                    538 ;------------------------------------------------------------
                                    539 ;	helloLED.c:153: void t0_int(void) __interrupt(1)
                                    540 ;	-----------------------------------------
                                    541 ;	 function t0_int
                                    542 ;	-----------------------------------------
      00009F                        543 _t0_int:
                                    544 ;	helloLED.c:155: TL0 = TL0 | TL_0;      //od�wie�a licznik T0
      00009F 43 8A 66         [24]  545 	orl	_TL0,#0x66
                                    546 ;	helloLED.c:156: TH0 = TH_0;            //ustawia flag� sygnalizuj�c�
      0000A2 75 8C FC         [24]  547 	mov	_TH0,#0xfc
                                    548 ;	helloLED.c:157: t0_flag = TRUE;        //fakt wyst�pienia przerwania
                                    549 ;	assignBit
      0000A5 D2*02            [12]  550 	setb	_t0_flag
                                    551 ;	helloLED.c:158: }
      0000A7 32               [24]  552 	reti
                                    553 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                    554 ;	eliminated unneeded push/pop psw
                                    555 ;	eliminated unneeded push/pop dpl
                                    556 ;	eliminated unneeded push/pop dph
                                    557 ;	eliminated unneeded push/pop b
                                    558 ;	eliminated unneeded push/pop acc
                                    559 	.area CSEG    (CODE)
                                    560 	.area CONST   (CODE)
      000000                        561 _WZOR:
      000000 3F                     562 	.db #0x3f	; 63
      000001 06                     563 	.db #0x06	; 6
      000002 5B                     564 	.db #0x5b	; 91
      000003 4F                     565 	.db #0x4f	; 79	'O'
      000004 66                     566 	.db #0x66	; 102	'f'
      000005 6D                     567 	.db #0x6d	; 109	'm'
      000006 7D                     568 	.db #0x7d	; 125
      000007 07                     569 	.db #0x07	; 7
      000008 7F                     570 	.db #0x7f	; 127
      000009 6F                     571 	.db #0x6f	; 111	'o'
                                    572 	.area XINIT   (CODE)
                                    573 	.area CABS    (ABS,CODE)
